{
  
    
        "post0": {
            "title": "Hvad er de politiske akser i Danmark?",
            "content": "Vi har for vane at opdele politik i højre- og venstrefløj. Men hvorfor egentlig det? Den historiske begrundelse er meget simpel: det var sådan medlemmerne af den franske nationalforsamling placerede sig efter den franske revolution i 1789. Dem til højre i salen var loyale over for konge og kirke, dem til venstre i salen støttede revolutionen. På den måde undgik man de værste slåskampe mens man skændtes om Frankrings fremtid. . Opdelingen har overlevet til i dag. Når nye politiske partier entrerer de nationale parlamenter, bliver de placeret i forhold til en højre-venstre akse, selv når deres politiske program ikke lige passer ind i den opdeling. For eksempel bliver grønne partier ofte placeret på venstre side, selvom naturbevaring jo lige så meget er en konservativ dyd. . . &#160; Enhedslisten: 13 mandater &#160; Socialistisk Folkeparti: 15 mandater &#160; Siumut&#160;: 1 mandat &#160; Socialdemokratiet: 48 mandater &#160; Alternativet: 1 mandat &#160; Uden for folketingsgrupperne: 4 mandater &#160; Radikale Venstre: 16 mandater &#160; Sambandsflokkurin: 1 mandat &#160; Javnaðarflokkurin: 1 mandat &#160; Inuit Ataqatigiit: 1 mandat &#160; Venstre: 42 mandater &#160; Det Konservative Folkeparti: 13 mandater &#160; Liberal Alliance: 3 mandater &#160; Dansk Folkeparti: 16 mandater &#160; Nye Borgerlige: 4 mandater&lt;/td&gt; . import sys import pyodbc import pandas as pd import numpy as np import matplotlib.pyplot as plt import xml.etree.ElementTree as ET from collections import Counter from sklearn.decomposition import PCA import seaborn as sns sns.set_style(&#39;white&#39;) sns.set_context(&#39;notebook&#39;) plt.rcParams[&quot;font.family&quot;] = &quot;sans-serif&quot; PLOTS_DIR = &#39;plots&#39; %matplotlib inline . . We start by calling the SQL server and write a query which is imported into a pandas dataframe. The period we want to investigate is given by the parameter periodid. . period_txt = str(sql_query[&#39;periodeid&#39;].unique()[0]) + &#39;: &#39; + sql_query.period.unique()[0] period_txt . &#39;151: 2019-20&#39; . len(sql_query) . 57817 . Som man kan se, er der kun knap 58.000 rækker i dataframen (coronakrisen i 2020 betød at afstemninger efter 28. maj 2020 blev foretaget ved håndsoprækkelse og derfor ikke er inkluderet i databasen). Tabellen indeholder ikke nogen kolonne der angiver hvilket parti folketingsmedlemmerne tilhører. Det haves ikke i databasen. Eneste sted jeg kan se at man kan finde et folketingsmedlems partitilknytning i data er i &quot;biografi&quot;-kolonnen, som består af en masse XML tags. For at ekstrahere partinavnet, der er placeret mellem tagsene &quot;party&quot;, bruger jeg bibliotekten xml.etree: . party = [] for bio_string in sql_query[&#39;biografi&#39;].values: try: root = ET.fromstring(bio_string) for child in root.findall(&quot;./party&quot;): party.append(child.text) except Exception as e: party.append(None) continue sql_query[&#39;party&#39;] = party . sql_query.party.unique() . array([&#39;Venstre&#39;, &#39;Socialdemokratiet&#39;, &#39;Dansk Folkeparti&#39;, &#39;Det Konservative Folkeparti&#39;, &#39;Enhedslisten&#39;, &#39;Liberal Alliance&#39;, &#39;Radikale Venstre&#39;, &#39;Socialistisk Folkeparti&#39;, &#39;Nye Borgerlige&#39;, &#39;Uden for folketingsgrupperne&#39;, &#39;Alternativet&#39;, &#39;Sambandsflokkurin&#39;, &#39;Javnaðarflokkurin&#39;, &#39;Inuit Ataqatigiit&#39;, &#39;Siumut&#39;], dtype=object) . Lad os lige tjekke at alle partimedlemmer nu også tilhører et parti: . for index, row in sql_query.iterrows(): if row.party == None: print(index, row[&#39;afstemning_id&#39;], row[&#39;fornavn&#39;], row[&#39;efternavn&#39;], row[&#39;stemme&#39;]) . Næste skridt i rensningen af data består i at omkode de enkelte stemmer så deres numeriske værdi er normaliseret og kan bruges i analysen. Folketingets database har kodet dem sådan at et 1-tal betyder en stemme FOR, et 2-tal betyder IMOD, et 3-tal betyder FRAVÆR, og et 4-tal betyder &quot;Hverken for eller imod&quot;. I stedet koder jeg dem sådan at 1 betyder FOR, -1 betyder &quot;IMOD&quot;, og 0 betyder &quot;hverken for eller imod. Desuden samler jeg for- og efternavn og beholder kun de kolonner, vi har brug for: . sql_query[&#39;name&#39;] = sql_query[[&#39;fornavn&#39;, &#39;efternavn&#39;]].agg(&#39; &#39;.join, axis=1) . df = sql_query[[&#39;bill&#39;, &#39;titel&#39;, &#39;resume&#39;, &#39;conclusion&#39;, &#39;name&#39;, &#39;party&#39;, &#39;vote&#39;]] df[&#39;vote&#39;].replace(to_replace=2, value=-1, inplace=True) df[&#39;vote&#39;].replace(to_replace=4, value=0, inplace=True) df.tail() . bill titel resume conclusion name party vote . 57812 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Birgitte Bergman | Det Konservative Folkeparti | 0 | . 57813 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Birgitte Vind | Socialdemokratiet | 0 | . 57814 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Pernille Vermund | Nye Borgerlige | 0 | . 57815 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Theresa Berg Andersen | Socialistisk Folkeparti | 0 | . 57816 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Ruben Kidde | Radikale Venstre | 0 | . Counter(df.vote) . Counter({1: 22567, -1: 11244, 3: 20853, 0: 3153}) . Desværre viser det sig at der er rigtig mange fravær i folketinget (mange 3-taller), og manglende stemmer gør det vanskeligt at foretage en ordentlig PCA, fordi de gængs PCA-algoritmer ikke kan klare NaNs. Da der er mødepligt i folketinget, og alle folketingsmedlemmer SKAL stemme ved alle afstemninger, er det jo en mærkelig sag. Men det viser sig, at folketingets partier benytter sig af såkaldte &#39;clearingsaftaler&#39;, som er private aftaler mellem de forskellige folketingsgrupper. Aftalerne sikrer, at et antal folketingsmedlemmer fra hver partigruppe kan få &#39;fri&#39; fra afstemningerne i folketingssalen, uden at der derved rokkes ved, hvilke partier som har flertal i Folketinget, eller ved, at der skal være mindst 90 medlemmer til stede, for at Folketinget er beslutningsdygtigt. Clearingaftalerne giver dermed mulighed for, at de politiske aktiviteter ikke går i stå, selv om der er møde og afstemninger i salen. Aftalerne giver plads til, at medlemmerne kan deltage i f.eks. politiske møder eller deltage i andre aktiviteter uden for Christiansborg, uden at afstemningerne i folketingssalen af den grund får et utilsigtet udfald. . I praksis indgås aftalerne typisk ved, at partigrupperne parvist aftaler for en hel folketingssamling, hvor mange medlemmer hver partigruppe kan &#39;cleare&#39; hos hinanden - dvs. give lov til at blive væk fra afstemningerne, fordi den politiske modpart også beder et antal medlemmer blive væk. Når et medlem er clearet, stemmer medlemmet ikke i salen den pågældende dag. Hvordan clearingerne fordeles på medlemmer i partigrupperne kan veksle fra dag til dag, alt efter hvem der har behov for at være fri for at deltage i afstemningerne i salen. Det er typisk gruppesekretæren i den enkelte folketingsgruppe, som koordinerer fordelingen af clearingerne og sikrer, at man kan stille med det aftalte antal medlemmer ved eventuelle afstemninger. Det er også typisk gruppesekretæren, som tager kontakt til sin modpart i de andre partigrupper, hvis man pludselig har mandefald på grund af f.eks. sygdom eller lignende, og aftaler de nødvendige yderligere clearinger for en relevant periode. Det typiske mønster for clearingaftalerne er, at regeringspartierne clearer medlemmer med deres umiddelbare modpart. Dermed sikrer man lettest, at den politiske balance er bevaret på trods af clearingerne. . Efter en samtale med partisekretær Annette Lind (S), som i nuværende folketingssamling en den der sammen med Erling Bonnesen (V) koordinerer clearningsaftalerne for alle partierne, forstå jeg at hvis en person bliver clearet, så vil den person ALTID stemme ihht. partilinjen. Det vil sige at jeg kan skrive en funktion, der erstatter alle fravær med typetallet (&quot;mode&quot;) for partiet for den givne afstemning. I tilfælde af at fravær er den hyppigste adfærd, vælger jeg i stedet den anden mest hyppige stemmetype. Og hvis alle medlemmer af et parti har været fraværende ved en afstemning (hvilket hyppigt sker for de grønlandske og færøske stemmer), sætter jeg dem til at være hverken for eller imod, dvs. til 0. . PS: Hvis et folketingsmedlem er &quot;Uden for folketingsgrupperne&quot;, ændrer jeg FRAVÆR til &quot;Hverken for eller imod&quot;. . def get_most_frequent_vote(bill, party): df_ap = df[(df.bill == bill) &amp; (df.party == party)] party_votes = df_ap.vote.values cnt = Counter(party_votes) mostfrequent_vote = cnt.most_common()[0][0] if mostfrequent_vote == 3: try: mostfrequent_vote = cnt.most_common()[1][0] # set the second most frequent vote as the most frequent one. except: # if all members of the party have been absent mostfrequent_vote = 0 # set their most frequent vote to be &quot;abstain&quot; return mostfrequent_vote for i, row in df.iterrows(): if row[&#39;vote&#39;] == 3: if row[&#39;party&#39;] == &#39;Uden for folketingsgrupperne&#39;: df.at[i,&#39;vote&#39;] = 0 else: ifor_val = get_most_frequent_vote(row[&#39;bill&#39;], row[&#39;party&#39;]) df.at[i,&#39;vote&#39;] = ifor_val Counter(df.vote) . Counter({1: 35397, -1: 17254, 0: 5166}) . For at få data i det rigtige format, bliver vi nød til at reorganisere tabellen således at rækkerne viser de enkelte folketingsmedlemmer, søjlerne de enkelte afstemninger, og selve cellerne indeholder så stemmerne. Vi kan bruge pivot-funtionen i python: . dp = df.pivot_table(index = [&#39;name&#39;, &#39;party&#39;], columns=[&#39;bill&#39;], values=[&#39;vote&#39;]) dp.dropna(inplace=True) dp.columns = [col[1] for col in dp.columns] # get rid of the extra multicolumn &quot;vote&quot; dp = dp.reset_index(level=[&#39;name&#39;, &#39;party&#39;]) # make the multiindex [name, party] into two columns dp.head() . name party 7165 7166 7167 7168 7169 7170 7171 7172 ... 7481 7482 7483 7484 7485 7486 7487 7488 7489 7490 . 0 Aaja Chemnitz Larsen | Inuit Ataqatigiit | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 Aki-Matilda Høegh-Dam | Siumut | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 Alex Vanopslagh | Liberal Alliance | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | 1.0 | -1.0 | ... | -1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 0.0 | . 3 Anders Kronborg | Socialdemokratiet | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | 1.0 | 1.0 | ... | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | . 4 Andreas Steenberg | Radikale Venstre | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | -1.0 | 1.0 | ... | -1.0 | -1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 0.0 | . 5 rows × 325 columns . Nu er vi sådan set klar til at lave pca&#39;en, men lad os lige give partierne en farve, så vi kan kende forskel på dem på det resulterende plot: . color_dict = { &#39;Enhedslisten&#39; : &#39;#E6801A&#39;, &#39;Socialistisk Folkeparti&#39; : &#39;#E07EA8&#39;, &#39;Sambandsflokkurin&#39; : &#39;#41b6c4&#39;, &#39;Javnaðarflokkurin&#39; : &#39;#67001f&#39;, &#39;Socialdemokratiet&#39; : &#39;#A82721&#39;, &#39;Siumut&#39; : &#39;#ef3b2c&#39;, &#39;Radikale Venstre&#39; : &#39;#733280&#39;, &#39;Inuit Ataqatigiit&#39; : &#39;#980043&#39;, &#39;Det Konservative Folkeparti&#39; : &#39;#96B226&#39;, &#39;Liberal Alliance&#39; : &#39;#3FB2BE&#39;, &#39;Venstre&#39; : &#39;#254264&#39;, &#39;Dansk Folkeparti&#39;: &#39;#EAC73E&#39;, &#39;Uden for folketingsgrupperne&#39; : &#39;#737373&#39;, &#39;nan&#39; : &#39;black&#39;, &#39;Alternativet&#39; : &#39;#2B8738&#39;, &#39;Nye Borgerlige&#39; : &#39;#127B7F&#39;, &#39;Kristendemokraterne&#39; : &#39;#8B8474&#39;, &#39;Klaus Riskær Pedersen&#39; : &#39;#6C8BB8&#39;, &#39;Stram Kurs&#39; : &#39;#998F4D&#39;, &#39;Nunatta Qitornai&#39; : &#39;#c51b8a&#39;, &#39;Tjóðveldi&#39; : &#39;#a6d96a&#39; } def party_color(x): return color_dict.get(str(x),&#39;black&#39;) colors = [party_color(x) for x in dp[&#39;party&#39;]] . num_folketingsmedlemmer = len(dp) num_bills = len(dp.columns)-2 bills = dp.columns[2:num_bills+2] dat = dp.iloc[:,2:num_bills+2] pca = PCA(n_components=3) pca.fit(dat) xvector = pca.components_[0] yvector = pca.components_[1] xs = pca.transform(dat)[:,0] ys = pca.transform(dat)[:,1] . pca.explained_variance_, pca.explained_variance_ratio_ . (array([59.93278144, 25.24262653, 16.02101912]), array([0.44414989, 0.18706807, 0.11872858])) . ix_high = np.argsort(xvector)[-5:] # returns an array of sorted indexes of the components ix_low = np.argsort(xvector)[:5] iy_high = np.argsort(yvector)[-5:] # returns an array of sorted indexes of the components iy_low = np.argsort(yvector)[:5] ix_highest_and_lowest_comps = np.append(ix_high, ix_low) iy_highest_and_lowest_comps = np.append(iy_high, iy_low) . nu kan vil plotte resultatet. . from adjustText import adjust_text fig, ax = plt.subplots() def get_arr_index_colors(color): # returns an array of indexes in the colors array corresponding to a certain party with color &quot;color&quot; col_mask = np.where(np.array(colors) == color,True,False) col_index = np.arange(0, len(colors))[col_mask] return col_index for color in np.unique(colors): ix_color = get_arr_index_colors(color) ax.scatter(xs[ix_color], ys[ix_color], c = color, label = list(color_dict.keys())[list(color_dict.values()).index(color)]) for i in ix_color: ax.annotate(dp.iloc[i][&#39;name&#39;], (xs[i], ys[i]), fontsize=2) for i in ix_highest_and_lowest_comps: # arrows project features as vectors onto PC axes plt.arrow(0, 0, xvector[i]*max(xs)*2, yvector[i]*max(ys)*2, color=&#39;grey&#39;, width=0.0005, head_width=0.005) texts = [plt.text(xvector[i]*max(xs)*2.2, yvector[i]*max(ys)*2.2, list(dat.columns.values)[i], color=&#39;black&#39;, fontsize=3)] for i in iy_highest_and_lowest_comps: # arrows project features as vectors onto PC axes plt.arrow(0, 0, xvector[i]*max(xs)*2, yvector[i]*max(ys)*2, color=&#39;grey&#39;, width=0.0005, head_width=0.005) plt.text(xvector[i]*max(xs)*2.2, yvector[i]*max(ys)*2.2, list(dat.columns.values)[i], color=&#39;black&#39;, fontsize=3) plt.scatter(0,0, color=&#39;white&#39;, s=4, zorder=20) adjust_text(texts) lgd = ax.legend(title=str(num_bills)+&#39; afstemninger&#39;, prop={&#39;size&#39;: 10}, bbox_to_anchor=(1.05, 1)) ax.set_title(&#39;Folketingsperiode &#39; + period_txt, fontsize=14) # invert the x-axis so that the &quot;left wing&quot; goes to the left and the &quot;right wing&quot; to the right. First grab a reference to the current axes and then set the xlimits to be the reverse of the current xlimits ax = plt.gca() ax.set_xlim(ax.get_xlim()[::-1]) ax.set_ylim(ax.get_ylim()[::-1]) #ax.set_xlim([25,-15]) #ax.set_ylim([12.5,-12.5]) #plt.tight_layout() # Remember: save as pdf and transparent=True for Adobe Illustrator if not os.path.exists(PLOTS_DIR): os.makedirs(PLOTS_DIR) plt.savefig(os.path.join(PLOTS_DIR, &#39;ft&#39;+str(periodid)+&#39;.png&#39;), bbox_extra_artists=(lgd,), bbox_inches=&#39;tight&#39;, transparent=True, dpi=800) plt.savefig(os.path.join(PLOTS_DIR, &#39;ft&#39;+str(periodid)+&#39;.pdf&#39;), bbox_extra_artists=(lgd,), bbox_inches=&#39;tight&#39;, transparent=True, dpi=800) sns.despine() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Da disse principal components udelukkende er beregnet ud fra afstemningerne, og vi ikke har inkluderet nogen som helst information om partierne, giver x-aksen stadig et overraskende godt billede af hvad vi normalt forestiller os som den ideologiske højre-venstre akse i politik. Enhedslisten ligger yderst til venstre, og Dansk Folkeparti ligger yderst til højre (i hvert fald i årene før folketingsvalget i efteråret 2018), og i midten øverst ligger Socialdemokratiet. PCA er altså en &quot;usuperviseret&quot; metode, der beregnet afstanden mellem partierne som en kompleks blanding af, hvordan der blev stemt i de 323 afstemninger der blev registreret i folketingssamlingen 2019-2020 (Corona-pandemien betød at der i en periode mellem april til oktober 2020 ikke blev trykt på afstemningsknapperne i folketingssalen, hvorfor disse afstemninger ikke er registreret i databasen!). . Lad os prøve at se lidt nærmere på denne første komponent i PCA-analysen, som altså projicerer ned på en akse de største forskelle mellem de danske politikere, og som står for circa 60 % af variansen i data. Vi starter med at plotte et heat map for at se, hvilke afstemninger der har haft størst betydning for denne spredning. . xvector.shape . (323,) . Vi tilføjer et ekstra element så vi har 12x27 elementer, som vi så kan plotte ved at bruge matshow. Jeg har brugt en farvekode som angiver de afstemninger der er vigtige for højrefløjen med blå, og dem der er vigtige for venstrefløjen med rød. . b = np.append(bills, [0]) b = b.reshape(12,27) w = np.append(xvector, [0]) w = w.reshape(12,27) fig, ax = plt.subplots(figsize=(12,8)) mesh = ax.matshow(w, cmap=&#39;seismic&#39;) for (i, j), z in np.ndenumerate(b): ax.text(j, i, &#39;{}&#39;.format(z), ha=&#39;center&#39;, va=&#39;center&#39;, fontsize=4, bbox=dict(boxstyle=&#39;round&#39;, facecolor=&#39;white&#39;, edgecolor=&#39;0.3&#39;)) plt.colorbar(mesh, ax=ax, fraction=0.02, pad=0.04) # arguments shrink the colorbar . &lt;matplotlib.colorbar.Colorbar at 0x420b15e0&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; w = np.append(yvector, [0]) w = w.reshape(12,27) fig, ax = plt.subplots(figsize=(12,8)) mesh = ax.matshow(w, cmap=&#39;PiYG&#39;) for (i, j), z in np.ndenumerate(b): ax.text(j, i, &#39;{}&#39;.format(z), ha=&#39;center&#39;, va=&#39;center&#39;, fontsize=4, bbox=dict(boxstyle=&#39;round&#39;, facecolor=&#39;white&#39;, edgecolor=&#39;0.3&#39;)) plt.colorbar(mesh, ax=ax, fraction=0.02, pad=0.04) . &lt;matplotlib.colorbar.Colorbar at 0x443dc700&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; print(&#39;the five most red bills (left):&#39;, bills[ix_high]) print(&#39;the five most blue bills (right):&#39;, bills[ix_low]) print(&#39;the five most green bills (bottom):&#39;, bills[iy_high]) print(&#39;the five most purple bills (top):&#39;, bills[iy_low]) . the five most red bills (left): Index([7399, 7386, 7351, 7376, 7456], dtype=&#39;object&#39;) the five most blue bills (right): Index([7414, 7248, 7385, 7237, 7278], dtype=&#39;object&#39;) the five most green bills (bottom): Index([7393, 7422, 7361, 7362, 7477], dtype=&#39;object&#39;) the five most purple bills (top): Index([7407, 7363, 7326, 7341, 7485], dtype=&#39;object&#39;) . print(&#39;Her de mest polariserende afstemninger som de røde (dvs. venstrefløjen + S) stemte for og vandt: n&#39;) for lov in bills[ix_high]: print(&#39;afstemnings-id&#39;, lov) print(df[df.bill == lov].titel.unique()[0], df[df.bill == lov].conclusion.unique()[0], &#39; n&#39;, &#39;Forklaring:&#39;, df[df.bill == lov].resume.unique()[0], &#39; n n&#39;) . Her afstemninger der trækker mest i den røde retning (dvs. til venstre): afstemnings-id 7399 Forslag til lov om ændring af færdselsloven. (Forhøjelse af bødeniveauet for ulovlig afholdelse af hvil i køretøjet m.v.). Forslaget blev vedtaget. For stemte 60 (S, RV, SF, EL og ALT), imod stemte 49 (V, DF, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Formålet med forslaget er at skærpe bødestraffen for ulovlig afholdelse af det regulære hvil i køretøjet. Forslaget indeholder derfor retningslinjer, hvorefter bødeniveauet forhøjes til en bøde på 10.000 kr. til chaufføren og en bøde på 20.000 kr. til vognmanden. Forslaget indeholder desuden en præcisering af, at retten til adgang uden retskendelse til brug for den administrative kontrol med virksomheders overholdelse af køre-hvile-tids-reglerne og kontrol med installatører og værksteder, som kan udføre installering, eftersyn, kontrol og reparation af takografer, er overgået til Transport- og Boligministeriet. Loven træder i kraft den 1. marts 2020. afstemnings-id 7386 Forslag til lov om ændring af aktieavancebeskatningsloven og dødsboskatteloven. (Ophævelse af hovedaktionærnedslaget). Forslaget blev vedtaget. For stemte 56 (S, RV, SF, EL og ALT), imod stemte 47 (V, DF, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Med lovforslaget foreslås det, at ophæve det særlige nedslag i den skattepligtige fortjeneste, som kan opnås ved afståelse af hovedaktionæraktier, der er erhvervet før den 19. maj 1993. afstemnings-id 7351 Forslag til lov om et midlertidigt børnetilskud til visse forsørgere. Forslaget blev vedtaget. For stemte 56 (S, RV, SF, EL og ALT), imod stemte 47 (V, DF, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Lovforslaget udmønter aftalen om et nyt midlertidigt børnetilskud, som udspringer af det såkaldte forståelsespapir &#34;Retfærdig retning for Danmark&#34; mellem regeringen (Socialdemokratiet), Radikale Venstre, Socialistisk Folkeparti og Enhedslisten. Med lovforslaget foreslås det at indføre et nyt midlertidigt skattefrit børnetilskud til børnefamilier med børn under 15 år, hvor en eller begge forældre er berørt af kontanthjælpsloftet og/eller integrationsydelsen. Med lovforslaget foreslås det, at det nye midlertidige børnetilskud udgør 700 kr. pr. barn pr. måned for familier på integrationsydelse og uddannelsesparate uddannelseshjælpsmodtagere. Tilskuddet udgør 600 kr. pr. barn pr. måned til enlige forældre og 550 kr. pr. barn pr. måned til øvrige familier. Enlige forsørgere får derudover et tilskud på 650 kr. pr. måned uafhængigt af antallet af børn. Børnefamilierne kan maksimalt få det i børnetilskud, som de har mistet som følge af indførelsen af kontanthjælpsloftet og integrationsydelsen. Det foreslås, at lovforslaget træder i kraft 1. januar 2020 med virkning fra 1. august 2019. afstemnings-id 7376 Forslag til lov om ændring af lov om arbejdsløshedsforsikring m.v. (Afskaffelse af opholdskrav for ret til dagpenge m.v.). Forslaget blev vedtaget. For stemte 59 (S, RV, SF, EL og ALT), imod stemte 50 (V, DF, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Med lovforslaget foreslås det at afskaffe opholdskravet for ret til dagpenge, der kræver ophold i riget, et EU/EØS-land eller Schweiz i 5 ud af 12 år i 2019, 6 ud af 12 år i 2020 og 7 ud af 12 år fra 2021 og fremefter. Med lovforslaget foreslås det desuden, at der etableres en overgangsordning, der giver mulighed for at genoprette medlemsskabet af en a-kasse fra udmeldelsestidspunktet for personer, der har meldt sig ud, fordi de har været ramt af opholdskravet. Ordningen målrettes personer, som ikke opfyldte betingelserne i opholdskravet i 2019 og frem til afskaffelsen af opholdskravet den 1. februar 2020, og som meldte sig ud af en a-kasse i samme periode. Det foreslås, at lovforslaget træder i kraft den 1. februar 2020. afstemnings-id 7456 Forslag til lov om ændring af revisorloven og lov om formidling af fast ejendom m.v. (Gebyrfinansiering af hvidvasktilsyn). Forslaget blev vedtaget. For stemte 54 (S, RV, SF, EL og UFG), imod stemte 41 (V, DF, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Lovforslaget skaber hjemmel til at gebyrfinansiere de udgifter, som er forbundet med hvidvasktilsynet med godkendte revisorer og ejendomsmæglere. Loven skal træde i kraft den 1. januar 2021. . print(&#39;Her de mest polariserende afstemninger som de blå (dvs. højrefløjen minus S) stemte for og tabte: n&#39;) for lov in bills[ix_low]: print(&#39;afstemnings-id&#39;, lov) print(df[df.bill == lov].titel.unique()[0], df[df.bill == lov].conclusion.unique()[0], &#39; n&#39;, &#39;Forklaring:&#39;, df[df.bill == lov].resume.unique()[0], &#39; n n&#39;) . Her de mest polariserende afstemninger som de blå (dvs. højrefløjen minus S) stemte for og tabte: afstemnings-id 7414 Forslag til lov om ændring af lov om afgift af tinglysning af ejer- og panterettigheder m.v. (tinglysningsafgiftsloven), emballageafgiftsloven, lov om afgift af bekæmpelsesmidler og forskellige andre love. (Indeksering af de faste tinglysningsafgifter og en række miljøafgifter og genindførelse af registreringsafgiften på luftfartøjer m.v.). Forslaget blev forkastet. For stemte 50 (V, DF, KF, NB og LA), imod stemte 59 (S, RV, SF, EL og ALT), hverken for eller imod stemte 0. Forklaring: Med lovforslaget foreslås det at indeksere afgifterne på tinglysning, råstoffer, emballager, bekæmpelsesmidler og spildevand frem til 2025. Indekseringen foreslås indført ved to satsforhøjelser i perioden 2020-2025. Afgifterne på råstoffer og tinglysning forhøjes i 2020 og 2023, og afgifterne på emballager, bekæmpelsesmidler og spildevand forhøjes i 2021 og 2024. Afgifterne foreslås forhøjet med 5,5 pct. pr. gang. Desuden foreslås en registreringsafgift på luftfartøjer fra og med den 1. januar 2021, således at der indføres en afgift for registrering af ejerrettigheder over fly på 0,1 pct. af flyets værdi og en afgift for registrering af pantrettigheder i fly på 0,1 pct. af pantets værdi. For registrering af pant i fly, der vejer under 5.700 kg, eller som er registreret godkendt til højst 10 passagerer, er afgiften på 1,5 pct. af pantets værdi. Lovforslaget udmønter dele af aftale om finansloven for 2020 indgået den 2. december 2019 mellem regeringen (Socialdemokratiet), Radikal Venstre, Socialistisk Folkeparti, Enhedslisten og Alternativet. afstemnings-id 7248 Forslag til lov om ændring af lov om Arbejdsgivernes Uddannelsesbidrag. (Modelparametre for erhvervsuddannelser til brug for beregning af praktikpladsafhængigt arbejdsgiverbidrag for 2020 og justering af det aktivitetsafhængige VEU-bidrag for 2020 m.v.). Forslaget blev forkastet. For stemte 51 (V, DF, KF, NB og LA), imod stemte 61 (S, RV, SF, EL og ALT), hverken for eller imod stemte 0. Forklaring: Forslaget vedrører det praktikpladsafhængige AUB-bidrag, der blev aftalt ved ”Trepartsaftale om tilstrækkelig og kvalificeret arbejdskraft i hele Danmark og praktikpladser” fra 2016, og det aktivitetsafhængige VEU-bidrag, der blev aftalt ved ”Trepartsaftalen om styrket og mere fleksibel voksen-, efter- og videreuddannelse (2018-2021)” fra 2017. I lov om Arbejdsgivernes Uddannelsesbidrag er det forudsat, at der årligt ved lov skal ske en fastsættelse af modelparametrene i det praktikpladsafhængige AUB-bidrag og af bidragssatsen i det aktivitetsafhængige VEU-bidrag. Forslaget har derfor til formål at fastsætte de årlige modelparametre i det praktikpladsafhængige AUB-bidrag for de enkelte erhvervsuddannelser for 2020 i bilag 1 til lov om Arbejdsgivernes Uddannelsesbidrag og at indføre den årlige tilpasning af det aktivitetsafhængige VEU-bidrag for 2020. afstemnings-id 7385 Forslag til lov om ændring af aktieavancebeskatningsloven og dødsboskatteloven. (Ophævelse af hovedaktionærnedslaget). Forslaget blev forkastet. For stemte 47 (V, DF, KF, NB og LA), imod stemte 57 (S, RV, SF, EL og ALT), hverken for eller imod stemte 0. Forklaring: Med lovforslaget foreslås det, at ophæve det særlige nedslag i den skattepligtige fortjeneste, som kan opnås ved afståelse af hovedaktionæraktier, der er erhvervet før den 19. maj 1993. afstemnings-id 7237 Forslag til lov om ændring af pensionsbeskatningsloven, pensionsafkastbeskatningsloven, selskabsskatteloven og forskellige andre love. (Videregivelse af oplysninger om diskvalificerende pensionsudbetalinger, smidiggørelse af regler for flytning af pensionsindbetalinger, justering af reglerne om omdannelse af pensionskasser til livsforsikringsselskaber og goodwillbeskatning m.v.). Forslaget blev forkastet. For stemte 50 (V, DF, KF, NB og LA), imod stemte 62 (S, RV, SF, EL og ALT), hverken for eller imod stemte 0. Forklaring: Formålet med forslaget er at foretage en række tekniske justeringer på pensionsbeskatningsområdet. Forslaget indeholder bl.a. adgang til oplysninger om diskvalificerende udbetalinger for pensionsinstitutter, smidigere regler for flytning af pensionsindbetalinger mellem forskellige pensionsordninger og justeringer af reglerne for skattefri omstruktureringer af pensionsinstitutter. afstemnings-id 7278 Forslag til finanslov for finansåret 2020. Forslaget blev forkastet. For stemte 50 (V, DF, KF, NB og LA), imod stemte 61 (S, RV, SF, EL, ALT og SIU), hverken for eller imod stemte 0. Forklaring: Finanslovforslaget fastlægger størrelsen og fordelingen af de samlede statslige udgifter og indtægter for finansåret 2020. Lovforslaget indeholder desuden overslag over statens udgifter for de efterfølgende 3 år. . print(&#39;Her de mest polariserende afstemninger som de grønne (dvs. bunden) stemte for og tabte: n&#39;) for lov in bills[iy_high]: print(&#39;afstemnings-id&#39;, lov) print(df[df.bill == lov].titel.unique()[0], df[df.bill == lov].conclusion.unique()[0], &#39; n&#39;, &#39;Forklaring:&#39;, df[df.bill == lov].resume.unique()[0], &#39; n n&#39;) . Her de mest polariserende afstemninger som de grønne (dvs. bunden) stemte for og tabte: afstemnings-id 7393 Forslag til lov om dyrevelfærd (dyrevelfærdsloven). Forslaget blev forkastet. For stemte 41 (DF, RV, SF, EL og ALT), imod stemte 62 (S, V, KF, NB og LA), hverken for eller imod stemte 0. Forklaring: Forslaget gennemfører en forenkling af lovgivningsstrukturen på dyrevelfærdsområdet og gør lovgivningen mere overskuelig og brugervenlig i praksis ved at ophæve en række dyreartsspecifikke love. Forslaget er en ny hovedlov og er rammelov for størstedelen af dyrevelfærdslovgivningen med det formål at fremme god dyrevelfærd og respekt for dyr som levende væsener. Loven varetager dyrevelfærdsmæssige og dyreetiske hensyn. Forslaget viderefører som udgangspunkt gældende ret og indeholder hovedsagelig regler fra den gældende dyreværnslov, men det indeholder også enkelte nye regler som f.eks. forbud mod dyrekampe. afstemnings-id 7422 Forslag til folketingsbeslutning om ens krav til kvalifikationer hos læger i Danmark, der er uddannet i henholdsvis EU-/EØS-lande og tredjelande. Forslaget blev forkastet. For stemte 21 (DF, EL og NB), imod stemte 88 (S, V, RV, SF, Christian Juhl (EL), KF, LA og UFG), hverken for eller imod stemte 0. Forklaring: For at sikre patientsikkerheden pålægger beslutningsforslaget regeringen at sørge for, at personer, der er uddannet i et EU-/EØS-land - bortset fra Danmark og de øvrige nordiske lande - og som søger om dansk lægeautorisation eller anerkendelse som speciallæge i Danmark, bliver mødt med de samme krav til og test af kvalifikationer som ansøgere, der er statsborgere og/eller uddannet i lande uden for EU/EØS. afstemnings-id 7361 Forslag til folketingsbeslutning om folketingsmedlemmers omkostningstillæg, eftervederlag, sygeorlov og afholdelse af barselsorlov. Forslaget blev forkastet. For stemte 22 (DF, EL og NB), imod stemte 80 (S, V, RV, SF, KF, ALT og LA), hverken for eller imod stemte 0. Forklaring: Beslutningsforslaget går ud på, at der skal gennemføres visse ændringer af folketingsmedlemmernes vilkår med hensyn til vederlag og orlov. Konkret indebærer forslaget, at medlemmer af Folketinget ikke skal kunne modtage omkostningstillæg, mens de er på barselsorlov, optjene eftervederlag, mens de bestrider et andet job, højst skal kunne modtage eftervederlag i 6 måneder, skal fremvise en lægeerklæring i forbindelse med sygeorlov, og at de skal omfattes af reglerne i barselsloven for afholdelse af barselsorlov. Beslutningsforslaget er en delvis genfremsættelse af beslutningsforslag nr. B 152, folketingsåret 2018-19, 1. samling. afstemnings-id 7362 Forslag til folketingsbeslutning om indførelse af årlige 2-procentsbesparelser på gruppestøttemidlerne til Folketingets partier. Forslaget blev forkastet. For stemte 25 (Jens Joel (S), DF, EL, NB og LA), imod stemte 77 (S, V, RV, SF, KF og ALT), hverken for eller imod stemte 0. Forklaring: Beslutningsforslaget indebærer, at der skal indføres årlige besparelser på 2 pct. på gruppestøttemidlerne til Folketingets partier svarende til det såkaldte omprioriteringsbidrag, som en række offentlige områder og institutioner er pålagt. afstemnings-id 7477 Forslag til folketingsbeslutning om ændring af ferieloven (borgerforslag). Forslaget blev forkastet. For stemte 20 (DF, EL, NB, LA og UFG), imod stemte 65 (S, V, RV, KF og ALT), hverken for eller imod stemte 9 (SF). Forklaring: Ifølge forslaget skal de såkaldte indefrosne feriepenge udbetales senest den 1. september 2020. Der er tale om et borgerforslag, som inden for den fastsatte frist har opnået det antal støttetilkendegivelser fra borgere, som kræves for at få forslaget fremsat og behandlet som beslutningsforslag i Folketinget. Fremsættelsen er alene udtryk for, at forslagsstillerne på vegne af de partier, som støtter borgerforslagsordningen, påtager sig at opfylde en nødvendig betingelse for, at borgerforslaget kan blive behandlet i Folketinget i overensstemmelse med intentionerne bag ordningen. . print(&#39;Her de mest polariserende afstemninger som de lilla (dvs. toppen) stemte for og vandt: n&#39;) for lov in bills[iy_low]: print(&#39;afstemnings-id&#39;, lov) print(df[df.bill == lov].titel.unique()[0], df[df.bill == lov].conclusion.unique()[0], &#39; n&#39;, &#39;Forklaring:&#39;, df[df.bill == lov].resume.unique()[0], &#39; n n&#39;) . Her de mest polariserende afstemninger som de lilla (dvs. toppen) stemte for og vandt: afstemnings-id 7407 Forslag til lov om ændring af lov om social service. (Ro og stabilitet for udsatte børn og unge og fuldbyrdelse af tvangsmæssige afgørelser om ændret anbringelsessted uden samtykke). Forslaget blev vedtaget. For stemte 73 (S, V, RV og KF), imod stemte 35 (DF, SF, EL, ALT, NB og LA), hverken for eller imod stemte 0. Forklaring: Med lovforslaget ændres lov om social service. Det foreslås blandt andet, at kommunerne får adgang til at fuldbyrde afgørelser om ændret anbringelsessted uden samtykke. Hvis denne fuldbyrdelse sker med bistand fra politiet, skal den registreres og indberettes af kommunen til Ankestyrelsen. Det forslås videre, at fuldbyrdelse af afgørelser skal ske med henblik på at sikre barnets eller den unges bedste. afstemnings-id 7363 Folketinget noterer sig, at der har været politiske drøftelser i forligskredsen med henblik på at ændre offentlighedsloven. Folketinget noterer sig endvidere, at det i forligskredsen ikke har været muligt at nå til enighed om en ændring af offentlighedsloven. Endelig noterer Folketinget sig, at justitsministeren ikke finder behov for at genåbne drøftelserne om at ændre offentlighedsloven. Forslaget blev vedtaget. For stemte 66 (S, V, Liselott Blixt (DF) og KF), imod stemte 44 (DF, RV, SF, EL, ALT, NB og LA), hverken for eller imod stemte 0. Forklaring: afstemnings-id 7326 Forslag til lov om ændring af lov om offentlighed i forvaltningen. (Ophævelse af revisionsbestemmelse). Forslaget blev vedtaget. For stemte 68 (S, V, KF og LA), imod stemte 46 (DF, RV, SF, EL, ALT, NB og UFG), hverken for eller imod stemte 0. Forklaring: Det følger af offentlighedslovens § 44, at justitsministeren i folketingsåret 2018-19 skulle fremsætte lovforslag om revision af offentlighedslovens § 16 om postlister. Ved en postliste forstås en fortegnelse over dokumenter, der den pågældende dag er modtaget i eller afsendt af myndigheden. Som opfølgning på den generelle evaluering af offentlighedsloven har der været forligskredsdrøftelser om en ny aftale om offentlighedsloven, og bl.a. af den grund er revisionen af postlistebestemmelsen blevet udskudt i 2017 og i 2018. Da det ikke har været muligt at opnå enighed i forligskredsen om at ændre offentlighedsloven, herunder om at indføre en postlisteordning, foreslås det, at revisionsbestemmelsen i offentlighedslovens § 44 ophæves. Lovforslaget er en genfremsættelse af L 176 (2018-19, 1. samling). Det foreslås, at loven træder i kraft den 1. januar 2020. afstemnings-id 7341 Forslag til lov om ændring af skatteforvaltningsloven. (Afledt skattemæssig virkning ved ekstraordinær genoptagelse af ejendomsvurderinger). Forslaget blev vedtaget. For stemte 78 (S, V, RV, SF, KF, ALT og LA), imod stemte 22 (DF, EL og NB), hverken for eller imod stemte 0. Forklaring: Lovforslaget handler om de dele af lovforslag nr. L 71, der omhandler afledt skattemæssig virkning ved ekstraordinær genoptagelse af ejendomsvurderinger. afstemnings-id 7485 Forslag til lov om ændring af aktiesparekontoloven. (Forhøjelse af loftet for indskud på aktiesparekontoen). Forslaget blev vedtaget. For stemte 71 (S, V, RV, KF, NB og LA), imod stemte 25 (DF, SF, EL, ALT og UFG), hverken for eller imod stemte 0. Forklaring: Det foreslås med lovforslaget at forhøje loftet for indskud på aktiesparekontoen fra 50.000 kr. i 2019 til 100.000 kr. i 2020. . fig, ax = plt.subplots(1,2) ax[0].hist(xvector, bins=20) ax[1].hist(yvector, bins=20) . (array([ 3., 2., 1., 1., 11., 33., 16., 20., 32., 83., 23., 3., 2., 12., 6., 55., 13., 1., 4., 2.]), array([-0.14631603, -0.13215475, -0.11799346, -0.10383217, -0.08967089, -0.0755096 , -0.06134832, -0.04718703, -0.03302574, -0.01886446, -0.00470317, 0.00945811, 0.0236194 , 0.03778069, 0.05194197, 0.06610326, 0.08026454, 0.09442583, 0.10858712, 0.1227484 , 0.13690969]), &lt;a list of 20 Patch objects&gt;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;",
            "url": "https://gavstrik.github.io/etsyvni/notebook/pca/folketinget/politik/2020/11/29/pca.html",
            "relUrl": "/notebook/pca/folketinget/politik/2020/11/29/pca.html",
            "date": " • Nov 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gavstrik.github.io/etsyvni/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gavstrik.github.io/etsyvni/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gavstrik.github.io/etsyvni/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gavstrik.github.io/etsyvni/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}