{
  
    
        "post0": {
            "title": "Hvad er de politiske akser i Danmark?",
            "content": "Vi har for vane at opdele politik i højre- og venstrefløj. Hvorfor egentlig det? Den historiske begrundelse er meget simpel: det var sådan medlemmerne af den franske nationalforsamling placerede sig efter den franske revolution i 1789. Dem til højre i salen var loyale over for kongen og kirken, dem til venstre i salen støttede op om revolutionen, og i midten sad de moderate. På den måde undgik man de værste verbale forulempelser og slåskampe. . . I dag forbinder man højre- og venstreføj med langt flere ideologiske grundholdninger end dem, der var fremherskende under den franske revolution. Opdelingen har dog overlevet, og selv når nye politiske partier kommer ind i de nationale parlamenter, forsøger man så vidt som muligt at placere dem i forhold til den klassiske højre-venstre opdeling - i Danmark for eksempel ved at placere De Radikale nogenlunde i midten, og Dansk Folkeparti helt ude til højre. . Enhedslisten: 13 seats Socialistisk Folkeparti: 15 seats Siumut : 1 seat Socialdemokratiet: 48 seats Alternativet: 1 seat Uden for folketingsgrupperne: 4 seats Radikale Venstre: 16 seats Sambandsflokkurin: 1 seat Javnaðarflokkurin: 1 seat Inuit Ataqatigiit: 1 seat Venstre: 42 seats Det Konservative Folkeparti: 13 seats Liberal Alliance: 3 seats Dansk Folkeparti: 16 seats Nye Borgerlige: 4 seats . import sys import pyodbc import pandas as pd import numpy as np import matplotlib.pyplot as plt import xml.etree.ElementTree as ET from collections import Counter from sklearn.decomposition import PCA import seaborn as sns sns.set_style(&#39;white&#39;) sns.set_context(&#39;notebook&#39;) plt.rcParams[&quot;font.family&quot;] = &quot;sans-serif&quot; PLOTS_DIR = &#39;plots&#39; %matplotlib inline . . We start by calling the SQL server and write a query which is imported into a pandas dataframe. The period we want to investigate is given by the parameter periodid. . sql_query.date.unique() . array([&#39;2019-10-24T00:00:00.000000000&#39;, &#39;2019-11-05T00:00:00.000000000&#39;, &#39;2019-11-07T00:00:00.000000000&#39;, &#39;2019-11-14T00:00:00.000000000&#39;, &#39;2019-11-19T00:00:00.000000000&#39;, &#39;2019-11-21T00:00:00.000000000&#39;, &#39;2019-11-26T00:00:00.000000000&#39;, &#39;2019-11-28T00:00:00.000000000&#39;, &#39;2019-11-28T10:00:00.000000000&#39;, &#39;2019-12-03T00:00:00.000000000&#39;, &#39;2019-12-05T00:00:00.000000000&#39;, &#39;2019-12-10T00:00:00.000000000&#39;, &#39;2019-12-12T00:00:00.000000000&#39;, &#39;2019-12-17T00:00:00.000000000&#39;, &#39;2019-12-17T13:00:00.000000000&#39;, &#39;2019-12-18T00:00:00.000000000&#39;, &#39;2019-12-19T00:00:00.000000000&#39;, &#39;2019-12-20T09:00:00.000000000&#39;, &#39;2019-12-20T00:00:00.000000000&#39;, &#39;2020-01-16T00:00:00.000000000&#39;, &#39;2020-01-21T00:00:00.000000000&#39;, &#39;2020-01-23T00:00:00.000000000&#39;, &#39;2020-01-28T00:00:00.000000000&#39;, &#39;2020-01-30T00:00:00.000000000&#39;, &#39;2020-02-04T00:00:00.000000000&#39;, &#39;2020-02-06T00:00:00.000000000&#39;, &#39;2020-02-18T00:00:00.000000000&#39;, &#39;2020-02-20T00:00:00.000000000&#39;, &#39;2020-02-25T00:00:00.000000000&#39;, &#39;2020-02-27T00:00:00.000000000&#39;, &#39;2020-03-10T00:00:00.000000000&#39;, &#39;2020-03-19T13:00:00.000000000&#39;, &#39;2020-03-19T00:00:00.000000000&#39;, &#39;2020-03-24T00:00:00.000000000&#39;, &#39;2020-03-26T00:00:00.000000000&#39;, &#39;2020-03-31T00:00:00.000000000&#39;, &#39;2020-04-02T00:00:00.000000000&#39;, &#39;2020-04-21T00:00:00.000000000&#39;, &#39;2020-04-28T00:00:00.000000000&#39;, &#39;2020-04-30T00:00:00.000000000&#39;, &#39;2020-05-07T00:00:00.000000000&#39;, &#39;2020-05-12T00:00:00.000000000&#39;, &#39;2020-05-12T13:00:00.000000000&#39;, &#39;2020-05-14T00:00:00.000000000&#39;, &#39;2020-05-19T10:00:00.000000000&#39;, &#39;2020-05-19T00:00:00.000000000&#39;, &#39;2020-05-20T00:00:00.000000000&#39;, &#39;2020-05-26T00:00:00.000000000&#39;, &#39;2020-05-28T00:00:00.000000000&#39;], dtype=&#39;datetime64[ns]&#39;) . period_txt = str(sql_query[&#39;periodeid&#39;].unique()[0]) + &#39;: &#39; + sql_query.period.unique()[0] period_txt . &#39;151: 2019-20&#39; . len(sql_query) . 57817 . Som man kan se, er der kun knap 58.000 rækker i dataframen (coronakrisen i 2020 betød at afstemninger efter 28. maj 2020 blev foretaget ved håndsoprækkelse og derfor ikke er inkluderet i databasen). Tabellen indeholder ikke nogen kolonne der angiver hvilket parti folketingsmedlemmerne tilhører. Det haves ikke i databasen. Eneste sted jeg kan se at man kan finde et folketingsmedlems partitilknytning i data er i &quot;biografi&quot;-kolonnen, som består af en masse XML tags. For at ekstrahere partinavnet, der er placeret mellem tagsene &quot;party&quot;, bruger jeg bibliotekten xml.etree: . party = [] for bio_string in sql_query[&#39;biografi&#39;].values: try: root = ET.fromstring(bio_string) for child in root.findall(&quot;./party&quot;): party.append(child.text) except Exception as e: party.append(None) continue sql_query[&#39;party&#39;] = party . sql_query.party.unique() . array([&#39;Venstre&#39;, &#39;Socialdemokratiet&#39;, &#39;Dansk Folkeparti&#39;, &#39;Det Konservative Folkeparti&#39;, &#39;Enhedslisten&#39;, &#39;Liberal Alliance&#39;, &#39;Radikale Venstre&#39;, &#39;Socialistisk Folkeparti&#39;, &#39;Nye Borgerlige&#39;, &#39;Uden for folketingsgrupperne&#39;, &#39;Alternativet&#39;, &#39;Sambandsflokkurin&#39;, &#39;Javnaðarflokkurin&#39;, &#39;Inuit Ataqatigiit&#39;, &#39;Siumut&#39;], dtype=object) . Lad os lige tjekke at alle partimedlemmer nu også tilhører et parti: . for index, row in sql_query.iterrows(): if row.party == None: print(index, row[&#39;afstemning_id&#39;], row[&#39;fornavn&#39;], row[&#39;efternavn&#39;], row[&#39;stemme&#39;]) . Næste skridt i rensningen af data består i at omkode de enkelte stemmer så deres numeriske værdi er normaliseret og kan bruges i analysen. Folketingets database har kodet dem sådan at et 1-tal betyder en stemme FOR, et 2-tal betyder IMOD, et 3-tal betyder FRAVÆR, og et 4-tal betyder &quot;Hverken for eller imod&quot;. I stedet koder jeg dem sådan at 1 betyder FOR, -1 betyder &quot;IMOD&quot;, og 0 betyder &quot;hverken for eller imod. Desuden samler jeg for- og efternavn og beholder kun de kolonner, vi har brug for: . sql_query[&#39;name&#39;] = sql_query[[&#39;fornavn&#39;, &#39;efternavn&#39;]].agg(&#39; &#39;.join, axis=1) . df = sql_query[[&#39;bill&#39;, &#39;titel&#39;, &#39;resume&#39;, &#39;conclusion&#39;, &#39;name&#39;, &#39;party&#39;, &#39;vote&#39;]] df[&#39;vote&#39;].replace(to_replace=2, value=-1, inplace=True) df[&#39;vote&#39;].replace(to_replace=4, value=0, inplace=True) df.tail() . bill titel resume conclusion name party vote . 57812 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Birgitte Bergman | Det Konservative Folkeparti | 0 | . 57813 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Birgitte Vind | Socialdemokratiet | 0 | . 57814 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Pernille Vermund | Nye Borgerlige | 0 | . 57815 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Theresa Berg Andersen | Socialistisk Folkeparti | 0 | . 57816 7490 | Folketinget konstaterer, at det aftalte loft o... | | Forslaget blev vedtaget. For stemte 54 (S, RV,... | Ruben Kidde | Radikale Venstre | 0 | . Counter(df.vote) . Counter({1: 22567, -1: 11244, 3: 20853, 0: 3153}) . Desværre viser det sig at der er rigtig mange fravær i folketinget (mange 3-taller), og manglende stemmer gør det vanskeligt at foretage en ordentlig PCA, fordi de gængs PCA-algoritmer ikke kan klare NaNs. Da der er mødepligt i folketinget, og alle folketingsmedlemmer SKAL stemme ved alle afstemninger, er det jo en mærkelig sag. Men det viser sig, at folketingets partier benytter sig af såkaldte &#39;clearingsaftaler&#39;, som er private aftaler mellem de forskellige folketingsgrupper. Aftalerne sikrer, at et antal folketingsmedlemmer fra hver partigruppe kan få &#39;fri&#39; fra afstemningerne i folketingssalen, uden at der derved rokkes ved, hvilke partier som har flertal i Folketinget, eller ved, at der skal være mindst 90 medlemmer til stede, for at Folketinget er beslutningsdygtigt. Clearingaftalerne giver dermed mulighed for, at de politiske aktiviteter ikke går i stå, selv om der er møde og afstemninger i salen. Aftalerne giver plads til, at medlemmerne kan deltage i f.eks. politiske møder eller deltage i andre aktiviteter uden for Christiansborg, uden at afstemningerne i folketingssalen af den grund får et utilsigtet udfald. . I praksis indgås aftalerne typisk ved, at partigrupperne parvist aftaler for en hel folketingssamling, hvor mange medlemmer hver partigruppe kan &#39;cleare&#39; hos hinanden - dvs. give lov til at blive væk fra afstemningerne, fordi den politiske modpart også beder et antal medlemmer blive væk. Når et medlem er clearet, stemmer medlemmet ikke i salen den pågældende dag. Hvordan clearingerne fordeles på medlemmer i partigrupperne kan veksle fra dag til dag, alt efter hvem der har behov for at være fri for at deltage i afstemningerne i salen. Det er typisk gruppesekretæren i den enkelte folketingsgruppe, som koordinerer fordelingen af clearingerne og sikrer, at man kan stille med det aftalte antal medlemmer ved eventuelle afstemninger. Det er også typisk gruppesekretæren, som tager kontakt til sin modpart i de andre partigrupper, hvis man pludselig har mandefald på grund af f.eks. sygdom eller lignende, og aftaler de nødvendige yderligere clearinger for en relevant periode. Det typiske mønster for clearingaftalerne er, at regeringspartierne clearer medlemmer med deres umiddelbare modpart. Dermed sikrer man lettest, at den politiske balance er bevaret på trods af clearingerne. . Efter en samtale med partisekretær Annette Lind (S), som i nuværende folketingssamling en den der sammen med Erling Bonnesen (V) koordinerer clearningsaftalerne for alle partierne, forstå jeg at hvis en person bliver clearet, så vil den person ALTID stemme ihht. partilinjen. Det vil sige at jeg kan skrive en funktion, der erstatter alle fravær med typetallet (&quot;mode&quot;) for partiet for den givne afstemning. I tilfælde af at fravær er den hyppigste adfærd, vælger jeg i stedet den anden mest hyppige stemmetype. Og hvis alle medlemmer af et parti har været fraværende ved en afstemning (hvilket hyppigt sker for de grønlandske og færøske stemmer), sætter jeg dem til at være hverken for eller imod, dvs. til 0. . def get_most_frequent_vote(bill, party): df_ap = df[(df.bill == bill) &amp; (df.party == party)] party_votes = df_ap.vote.values cnt = Counter(party_votes) mostfrequent_vote = cnt.most_common()[0][0] if mostfrequent_vote == 3: try: mostfrequent_vote = cnt.most_common()[1][0] # set the second most frequent vote as the most frequent one. except: # if all members of the party have been absent mostfrequent_vote = 0 # set their most frequent vote to be &quot;abstain&quot; return mostfrequent_vote for i, row in df.iterrows(): if row[&#39;vote&#39;] == 3: ifor_val = get_most_frequent_vote(row[&#39;bill&#39;], row[&#39;party&#39;]) df.at[i,&#39;vote&#39;] = ifor_val Counter(df.vote) . Counter({1: 35879, -1: 17432, 0: 4506}) . For at få data i det rigtige format, bliver vi nød til at reorganisere tabellen således at rækkerne viser de enkelte folketingsmedlemmer, søjlerne de enkelte afstemninger, og selve cellerne indeholder så stemmerne. Vi kan bruge pivot-funtionen i python: . dp = df.pivot_table(index = [&#39;name&#39;, &#39;party&#39;], columns=[&#39;bill&#39;], values=[&#39;vote&#39;]) dp.dropna(inplace=True) dp.columns = [col[1] for col in dp.columns] # get rid of the extra multicolumn &quot;vote&quot; dp = dp.reset_index(level=[&#39;name&#39;, &#39;party&#39;]) # make the multiindex [name, party] into two columns dp.head() . name party 7165 7166 7167 7168 7169 7170 7171 7172 ... 7481 7482 7483 7484 7485 7486 7487 7488 7489 7490 . 0 Aaja Chemnitz Larsen | Inuit Ataqatigiit | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 Aki-Matilda Høegh-Dam | Siumut | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 Alex Vanopslagh | Liberal Alliance | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | 1.0 | -1.0 | ... | -1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 0.0 | . 3 Anders Kronborg | Socialdemokratiet | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | 1.0 | 1.0 | ... | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | . 4 Andreas Steenberg | Radikale Venstre | 1.0 | 1.0 | 1.0 | -1.0 | -1.0 | 1.0 | -1.0 | 1.0 | ... | -1.0 | -1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 1.0 | 0.0 | . 5 rows × 325 columns . Nu er vi sådan set klar til at lave pca&#39;en, men lad os lige give partierne en farve, så vi kan kende forskel på dem på det resulterende plot: . color_dict = { &#39;Enhedslisten&#39; : &#39;#E6801A&#39;, &#39;Socialistisk Folkeparti&#39; : &#39;#E07EA8&#39;, &#39;Sambandsflokkurin&#39; : &#39;#41b6c4&#39;, &#39;Javnaðarflokkurin&#39; : &#39;#67001f&#39;, &#39;Socialdemokratiet&#39; : &#39;#A82721&#39;, &#39;Siumut&#39; : &#39;#ef3b2c&#39;, &#39;Radikale Venstre&#39; : &#39;#733280&#39;, &#39;Inuit Ataqatigiit&#39; : &#39;#980043&#39;, &#39;Det Konservative Folkeparti&#39; : &#39;#96B226&#39;, &#39;Liberal Alliance&#39; : &#39;#3FB2BE&#39;, &#39;Venstre&#39; : &#39;#254264&#39;, &#39;Dansk Folkeparti&#39;: &#39;#EAC73E&#39;, &#39;Uden for folketingsgrupperne&#39; : &#39;#737373&#39;, &#39;nan&#39; : &#39;black&#39;, &#39;Alternativet&#39; : &#39;#2B8738&#39;, &#39;Nye Borgerlige&#39; : &#39;#127B7F&#39;, &#39;Kristendemokraterne&#39; : &#39;#8B8474&#39;, &#39;Klaus Riskær Pedersen&#39; : &#39;#6C8BB8&#39;, &#39;Stram Kurs&#39; : &#39;#998F4D&#39;, &#39;Nunatta Qitornai&#39; : &#39;#c51b8a&#39;, &#39;Tjóðveldi&#39; : &#39;#a6d96a&#39; } def party_color(x): return color_dict.get(str(x),&#39;black&#39;) colors = [party_color(x) for x in dp[&#39;party&#39;]] . num_folketingsmedlemmer = len(dp) num_bills = len(dp.columns)-2 bills = dp.columns[2:num_bills+2] dat = dp.iloc[:,2:num_bills+2] pca = PCA(n_components=3) pca.fit(dat) xvector = pca.components_[0] yvector = pca.components_[1] xs = pca.transform(dat)[:,0] ys = pca.transform(dat)[:,1] . pca.explained_variance_, pca.explained_variance_ratio_ . (array([61.99986167, 24.6393889 , 16.16983858]), array([0.45806589, 0.18204014, 0.11946561])) . Da disse principal components udelukkende er beregnet ud fra afstemningerne, og vi ikke har inkluderet nogen som helst information om partierne, giver x-aksen stadig et overraskende godt billede af hvad vi normalt forestiller os som den ideologiske højre-venstre akse i politik. Enhedslisten ligger yderst til venstre, og Dansk Folkeparti ligger yderst til højre (i hvert fald i årene før folketingsvalget i efteråret 2018), og i midten øverst ligger Socialdemokratiet. PCA er altså en &quot;usuperviseret&quot; metode, der beregnet afstanden mellem partierne som en kompleks blanding af, hvordan der blev stemt i de 323 afstemninger der blev registreret i folketingssamlingen 2019-2020 (Corona-pandemien betød at der i en periode mellem april til oktober 2020 ikke blev trykt på afstemningsknapperne i folketingssalen, hvorfor disse afstemninger ikke er registreret i databasen!). . Lad os prøve at se lidt nærmere på denne første komponent i PCA-analysen, som altså projicerer ned på en akse de største forskelle mellem de danske politikere, og som står for circa 60 % af variansen i data. Vi starter med at plotte et heat map for at se, hvilke afstemninger der har haft størst betydning for denne spredning. . xvector.shape . (323,) . Vi tilføjer et ekstra element så vi har 12x27 elementer, som vi så kan plotte ved at bruge matshow. Jeg har brugt en farvekode som angiver de afstemninger der er vigtige for højrefløjen med blå, og dem der er vigtige for venstrefløjen med rød. . b = np.append(bills, [0]) b = b.reshape(12,27) w = np.append(xvector, [0]) w = w.reshape(12,27) fig, ax = plt.subplots(figsize=(12,8)) mesh = ax.matshow(w, cmap=&#39;seismic&#39;) for (i, j), z in np.ndenumerate(b): ax.text(j, i, &#39;{}&#39;.format(z), ha=&#39;center&#39;, va=&#39;center&#39;, fontsize=4, bbox=dict(boxstyle=&#39;round&#39;, facecolor=&#39;white&#39;, edgecolor=&#39;0.3&#39;)) plt.colorbar(mesh, ax=ax, fraction=0.02, pad=0.04) . &lt;matplotlib.colorbar.Colorbar at 0x4ae531c0&gt; . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-11-09T10:38:12.616815 image/svg+xml Matplotlib v3.3.1, https://matplotlib.org/ ix_high = np.argsort(xvector)[-5:] # returns an array of sorted indexes of the components ix_low = np.argsort(xvector)[:5] iy_high = np.argsort(yvector)[-5:] # returns an array of sorted indexes of the components iy_low = np.argsort(yvector)[:5] ix_highest_and_lowest_comps = np.append(ix_high, ix_low) iy_highest_and_lowest_comps = np.append(iy_high, iy_low) ix_highest_and_lowest_comps, iy_highest_and_lowest_comps . (array([219, 248, 102, 133, 140, 293, 101, 128, 129, 136], dtype=int32), array([254, 226, 194, 195, 309, 239, 196, 159, 317, 174], dtype=int32)) . fig, ax = plt.subplots(1,2) ax[0].hist(xvector, bins=20) ax[1].hist(yvector, bins=20) . (array([ 3., 1., 2., 1., 10., 33., 18., 10., 39., 79., 28., 4., 3., 11., 7., 58., 9., 1., 5., 1.]), array([-0.1492773 , -0.13476624, -0.12025517, -0.1057441 , -0.09123303, -0.07672197, -0.0622109 , -0.04769983, -0.03318876, -0.0186777 , -0.00416663, 0.01034444, 0.0248555 , 0.03936657, 0.05387764, 0.06838871, 0.08289977, 0.09741084, 0.11192191, 0.12643298, 0.14094404]), &lt;BarContainer object of 20 artists&gt;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-11-09T10:39:48.575007 image/svg+xml Matplotlib v3.3.1, https://matplotlib.org/ Men hvad med y-aksen? Den repræsenterer den næststørste afstand mellem stemmerne/partierne. Hvad står den for? Det er svært at sige, fordi denne komponent også er et mix af alle afstemnigner. Vi kan prøve at lave et heat-plot for at se, hvilke afstemninger har haft størst indflydelse på de enkelte komponenter: . from adjustText import adjust_text fig, ax = plt.subplots() def get_arr_index_colors(color): # returns an array of indexes in the colors array corresponding to a certain party with color &quot;color&quot; col_mask = np.where(np.array(colors) == color,True,False) col_index = np.arange(0, len(colors))[col_mask] return col_index for color in np.unique(colors): ix_color = get_arr_index_colors(color) ax.scatter(xs[ix_color], ys[ix_color], c = color, label = list(color_dict.keys())[list(color_dict.values()).index(color)]) for i in ix_color: ax.annotate(dp.iloc[i][&#39;name&#39;], (xs[i], ys[i]), fontsize=2) for i in ix_highest_and_lowest_comps: # arrows project features as vectors onto PC axes plt.arrow(0, 0, xvector[i]*max(xs)*2, yvector[i]*max(ys)*2, color=&#39;grey&#39;, width=0.0005, head_width=0.005) texts = [plt.text(xvector[i]*max(xs)*2.2, yvector[i]*max(ys)*2.2, list(dat.columns.values)[i], color=&#39;black&#39;, fontsize=3)] for i in iy_highest_and_lowest_comps: # arrows project features as vectors onto PC axes plt.arrow(0, 0, xvector[i]*max(xs)*2, yvector[i]*max(ys)*2, color=&#39;grey&#39;, width=0.0005, head_width=0.005) plt.text(xvector[i]*max(xs)*2.2, yvector[i]*max(ys)*2.2, list(dat.columns.values)[i], color=&#39;black&#39;, fontsize=3) plt.scatter(0,0, color=&#39;white&#39;, s=4, zorder=20) adjust_text(texts) lgd = ax.legend(title=str(num_bills)+&#39; afstemninger&#39;, prop={&#39;size&#39;: 10}, bbox_to_anchor=(1.05, 1)) ax.set_title(&#39;Folketingsperiode &#39; + period_txt, fontsize=14) # invert the x-axis so that the &quot;left wing&quot; goes to the left and the &quot;right wing&quot; to the right. First grab a reference to the current axes and then set the xlimits to be the reverse of the current xlimits ax = plt.gca() ax.set_xlim(ax.get_xlim()[::-1]) ax.set_ylim(ax.get_ylim()[::-1]) ax.set_xlim([25,-15]) ax.set_ylim([12.5,-12.5]) #plt.tight_layout() # Remember: save as pdf and transparent=True for Adobe Illustrator if not os.path.exists(PLOTS_DIR): os.makedirs(PLOTS_DIR) plt.savefig(os.path.join(PLOTS_DIR, &#39;ft&#39;+str(periodid)+&#39;.png&#39;), bbox_extra_artists=(lgd,), bbox_inches=&#39;tight&#39;, transparent=True, dpi=800) plt.savefig(os.path.join(PLOTS_DIR, &#39;ft&#39;+str(periodid)+&#39;.pdf&#39;), bbox_extra_artists=(lgd,), bbox_inches=&#39;tight&#39;, transparent=True, dpi=800) sns.despine() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2020-11-09T12:31:58.294040 image/svg+xml Matplotlib v3.3.1, https://matplotlib.org/",
            "url": "https://gavstrik.github.io/etsyvni/fastpages/jupyter/pca/folketinget/2020/11/29/pca.html",
            "relUrl": "/fastpages/jupyter/pca/folketinget/2020/11/29/pca.html",
            "date": " • Nov 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gavstrik.github.io/etsyvni/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gavstrik.github.io/etsyvni/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gavstrik.github.io/etsyvni/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gavstrik.github.io/etsyvni/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}